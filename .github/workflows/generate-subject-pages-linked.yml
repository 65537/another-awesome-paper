# GitHub Actions workflow to generate subject pages after the README has been sorted.
# This version fixes a previous error where the Python script was executed as shell
# commands, causing "command not found" failures (exit code 127). The script is
# now wrapped in a python heredoc. It triggers after the "ðŸ¤– Sort Papers Table"
# workflow completes and on manual runs.

name: Generate subject pages after sorting

on:
  workflow_run:
    workflows: ["ðŸ¤– Sort Papers Table"]
    branches: [ main ]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-pages:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip

      - name: Generate subject pages and update links
        run: |
          python <<'PY'
          import re
          from pathlib import Path

          repo_root = Path('.')
          readme_path = repo_root / 'README.md'
          subjects_dir = repo_root / 'subjects'
          subjects_dir.mkdir(exist_ok=True)

          def slugify(text: str) -> str:
              text = text.lower().strip()
              text = re.sub(r'[^a-z0-9]+', '-', text)
              return text.strip('-')

          content = readme_path.read_text(encoding='utf-8').splitlines()

          # Locate table boundaries
          header_idx = next(i for i, line in enumerate(content) if line.strip().startswith('|') and 'Title' in line)
          sep_idx = header_idx + 1
          body_start = header_idx + 2
          body_end = next((i for i in range(body_start, len(content)) if content[i].strip() == ''), len(content))

          header = content[header_idx]
          separator = content[sep_idx]
          rows = content[body_start:body_end]

          unique_subjects = set()
          parsed_rows = []

          for row in rows:
              columns = [c.strip() for c in row.strip('|').split('|')]
              if len(columns) < 4:
                  parsed_rows.append((row, []))
                  continue
              subjects_col = columns[1]
              raw_subs = [s.strip() for s in re.split(r',\s*', subjects_col)]
              subs = []
              for s in raw_subs:
                  s_clean = re.sub(r'^[\[\(]+|[\)\]]+$', '', s).strip()
                  if s_clean:
                      subs.append(s_clean)
                      unique_subjects.add(s_clean)
              parsed_rows.append((row, subs))

          # Generate subject pages
          for subj in sorted(unique_subjects):
              slug = slugify(subj)
              page_path = subjects_dir / f'{slug}.md'
              rows_for_subj = [r for r, subs in parsed_rows if subj in subs]
              lines = []
              lines.append('---')
              lines.append(f'title: {subj}')
              lines.append('layout: default')
              lines.append('---\n')
              lines.append(f'# {subj} papers\n')
              lines.append(header)
              lines.append(separator)
              lines.extend(rows_for_subj)
              page_path.write_text('\n'.join(lines), encoding='utf-8')

          # Update README links
          new_rows = []
          for row, subs in parsed_rows:
              if not subs:
                  new_rows.append(row)
                  continue
              cols = [c.strip() for c in row.strip('|').split('|')]
              links = []
              for s in subs:
                  slug = slugify(s)
                  links.append(f'[{s}](./subjects/{slug}.md)')
              cols[1] = ', '.join(links)
              new_rows.append('| ' + ' | '.join(cols) + ' |')

          updated = content[:body_start] + new_rows + content[body_end:]
          readme_path.write_text('\n'.join(updated), encoding='utf-8')
          PY

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Pull latest main branch with rebase to avoid non-fast-forward errors
          git pull --rebase origin main
          git add README.md subjects
          if ! git diff --cached --quiet; then
            git commit -m "chore: auto-generate subject pages and update links"
            git push origin HEAD:main
          else
            echo "No changes detected."
          fi